import express from 'express';
import { config } from 'dotenv';
import _ from 'lodash';

config();

const NRAIL_LOGO = '<?xml version="1.0" encoding="UTF-8"?> <svg height="50" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 257.67 100"><path d="M193.65,367.43h8.95v40.11h-8.95L174.54,382.4v25.14h-8.95V367.43H174l19.68,25.82Z" transform="translate(-54.36 -335.28)" fill="#8c9ba5"></path><path d="M245,380.74q0,9.64-7.63,12.46l10.15,14.34h-11l-8.9-12.8h-6.2v12.8h-8.95V367.43h15.21q9.36,0,13.34,3.15T245,380.74Zm-10.79,4.77a6.08,6.08,0,0,0,1.67-4.74q0-3.24-1.73-4.45t-6-1.2h-6.72V387H228Q232.56,387,234.22,385.51Z" transform="translate(-54.36 -335.28)" fill="#8c9ba5"></path><path d="M278.81,407.54h-8.09v-3.73a10.15,10.15,0,0,1-8.24,4.19,12.25,12.25,0,0,1-8.23-2.84,9.46,9.46,0,0,1-3.33-7.58,8,8,0,0,1,3.44-7.08q3.45-2.36,9.42-2.36h6.42V388q0-4.94-5.22-4.93a13.91,13.91,0,0,0-4.73.89,15.24,15.24,0,0,0-4.22,2.21l-3.85-5.57a23,23,0,0,1,13.89-4.42,14.38,14.38,0,0,1,9.18,2.81q3.57,2.82,3.56,8.9Zm-8.67-11.76v-1.5h-5.39c-3.44,0-5.16,1.08-5.16,3.22a3,3,0,0,0,1.23,2.55,5.92,5.92,0,0,0,3.53.89,6.28,6.28,0,0,0,4-1.4A4.57,4.57,0,0,0,270.14,395.78Z" transform="translate(-54.36 -335.28)" fill="#8c9ba5"></path><path d="M287.39,372.74A5.13,5.13,0,1,1,291,374.2,4.86,4.86,0,0,1,287.39,372.74Zm7.89,34.8h-8.61V376.67h8.61Z" transform="translate(-54.36 -335.28)" fill="#8c9ba5"></path><path d="M312,407.54h-8.61V365H312Z" transform="translate(-54.36 -335.28)" fill="#8c9ba5"></path><path d="M151.87,385.28a47.51,47.51,0,1,0-47.51,47.51A47.51,47.51,0,0,0,151.87,385.28Z" transform="translate(-54.36 -335.28)" fill="#fff"></path><path d="M154.36,385.28a50,50,0,1,0-50,50A50,50,0,0,0,154.36,385.28Zm-29.83,41.25c-.56.28-1.13.54-1.7.79-.23.11-.47.2-.71.3s-.75.33-1.13.48l-.39.13-1.07.39c-.47.16-.94.33-1.41.47l-.83.25c-.56.16-1.12.33-1.68.47h-.06c-1.18.3-2.37.54-3.56.74h0l-.54.09-1,.15-1.86.21-1,.07c-.45,0-.9.06-1.36.08-.27,0-.55,0-.83,0q-1,0-2.07,0l-.6,0c-.63,0-1.26-.05-1.89-.1l-.38,0c-.78-.07-1.56-.15-2.34-.26l-.15,0c-.77-.11-1.55-.24-2.32-.39l-.1,0a46.75,46.75,0,0,1-4.73-1.19l-.19-.06a45.42,45.42,0,0,1-4.46-1.66l-.35-.16-.81-.35c-.37-.17-.72-.35-1.08-.53l-.25-.12c-.71-.36-1.42-.74-2.11-1.13h0c-1.06-.61-2.09-1.25-3.09-1.93h0l-.15-.11-1.21-.85-.09-.08c-.43-.31-.84-.63-1.26-.95,0,0,0,0-.05-.05-.42-.33-.84-.67-1.24-1l-.1-.09c-.39-.34-.78-.68-1.15-1L73,418.8l-.94-.9-.53-.54-.63-.65c-.28-.29-.55-.6-.82-.9l-.29-.33c-.35-.4-.7-.81-1-1.23l0,0a44.77,44.77,0,0,1-3.83-5.52h0a45.36,45.36,0,0,1-2.74-5.44,1.11,1.11,0,0,1-.07-.16c-.17-.39-.33-.78-.48-1.18s-.22-.58-.32-.87l-.11-.29a46.68,46.68,0,0,1-1.39-4.61l0-.14a45.17,45.17,0,0,1-.89-4.84.11.11,0,0,1,0,0c-.1-.81-.18-1.61-.24-2.41a.28.28,0,0,1,0-.09c-.06-.8-.1-1.6-.11-2.4,0-.11,0-.21,0-.32,0-.66,0-1.31,0-2,0-.19,0-.37,0-.56,0-.7.07-1.4.14-2.09,0-.27,0-.53.08-.79.05-.47.1-.93.16-1.4,0-.31.09-.61.14-.92q.13-.93.33-1.86c.07-.34.14-.67.22-1,0-.17.07-.35.11-.53h0c.28-1.17.6-2.35,1-3.51h0a.14.14,0,0,0,0-.06c.18-.54.37-1.07.56-1.6l.32-.87c.17-.45.37-.89.55-1.34s.31-.72.47-1.07c.05-.13.1-.25.16-.37.17-.37.36-.73.54-1.1l.34-.7c.29-.55.59-1.09.9-1.63.09-.16.17-.32.27-.48A45.12,45.12,0,0,1,69,356a.87.87,0,0,1,.09-.11c.48-.58,1-1.14,1.48-1.69.14-.16.29-.3.43-.45q.6-.65,1.23-1.26l.62-.59c.37-.35.74-.69,1.12-1l.76-.66c.35-.29.71-.59,1.07-.87l.84-.66,1.1-.8.88-.61c.45-.31.91-.6,1.38-.89l.94-.58c.58-.34,1.16-.67,1.76-1l.78-.4,1.44-.71.84-.37,1.5-.64.47-.19c.13-.06.27-.1.4-.15.39-.15.78-.28,1.18-.42l1-.35,1.07-.32c.38-.11.77-.23,1.16-.33l.89-.22,1.34-.32.7-.14c.51-.1,1-.2,1.53-.28l.55-.08,1.67-.23.51-.05c.57-.05,1.13-.11,1.69-.14l.66,0c.51,0,1-.05,1.54-.06.33,0,.66,0,1,0s.8,0,1.2,0,.94,0,1.41.07l.78.05c.57,0,1.15.11,1.72.18l.47.05c.61.08,1.22.17,1.83.28l.35.05c.6.11,1.19.23,1.79.37l.41.08c.54.12,1.08.27,1.62.41l.57.15,1.43.44c.25.08.51.15.76.24l1.24.44.93.35,1.08.45,1.06.46.43.18.58.29,1,.52,1,.54.94.52c.36.21.72.42,1.07.64l.81.5,1.12.74.7.49,1.14.84.63.49c.38.29.76.59,1.12.9s.41.35.61.53l1.06.94.64.61c.32.3.63.61.94.92l.69.72c.27.3.55.59.81.89l.74.85c.23.27.47.55.69.83s.5.63.75,1,.41.53.6.8.49.68.73,1l.55.8c.23.35.45.71.67,1.06s.36.58.53.87.4.69.59,1,.36.64.53,1,.34.65.5,1,.35.72.52,1.09.29.62.42.93.34.8.51,1.21c.07.17.15.35.22.53l.14.39c.15.4.29.8.43,1.2s.23.66.34,1,.22.71.33,1.08.22.76.32,1.14.15.6.23.9.22.89.31,1.34c.05.23.09.47.14.7.1.51.2,1,.28,1.53,0,.18.05.36.08.53.09.57.17,1.13.23,1.69,0,.16,0,.32.05.48.05.57.11,1.15.15,1.73,0,.19,0,.39,0,.59,0,.53.06,1.07.06,1.61,0,.29,0,.59,0,.89s0,.87,0,1.3-.05.86-.07,1.28,0,.61-.06.91c0,.53-.1,1.06-.16,1.6,0,.19,0,.39-.07.59-.07.57-.16,1.14-.26,1.71,0,.16,0,.32-.07.48-.1.56-.22,1.11-.34,1.67,0,.17-.07.35-.11.52q-.18.76-.39,1.53c-.06.22-.11.44-.18.67-.12.45-.26.89-.4,1.34-.09.28-.18.57-.28.85s-.27.77-.41,1.15-.25.69-.38,1-.27.67-.42,1-.32.76-.49,1.14l-.17.39c-.07.16-.16.31-.23.47q-.34.72-.72,1.44l-.44.82c-.25.46-.52.92-.79,1.38-.15.26-.3.52-.46.77-.34.56-.71,1.11-1.08,1.66-.21.32-.44.63-.66.94s-.63.88-1,1.31l-.67.84c-.28.35-.57.7-.86,1l-.72.8c-.31.34-.62.68-.94,1l-.7.72c-.35.35-.72.7-1.09,1l-.63.59c-.44.39-.88.77-1.33,1.14l-.48.41c-.58.46-1.18.92-1.78,1.36l-.12.09A45.34,45.34,0,0,1,125,426.3Z" transform="translate(-54.36 -335.28)" fill="#8c9ba5"></path><path d="M85.87,407.43h0a1.22,1.22,0,0,0,.63.18,1.25,1.25,0,0,0,.63-.18,1.21,1.21,0,0,0,.22-1.91,1.24,1.24,0,0,0-.85-.35,1.22,1.22,0,0,0-.63,2.26Z" transform="translate(-54.36 -335.28)" fill="#06de3a"></path><path d="M91.09,408.74h4.33a.87.87,0,0,0,.87-.87v-2.95a.86.86,0,0,0-.87-.87H91.09a.86.86,0,0,0-.87.87v2.95a1.23,1.23,0,0,0,0,.2A.87.87,0,0,0,91.09,408.74Z" transform="translate(-54.36 -335.28)" fill="#06de3a"></path><path d="M147.08,383c0-.15,0-.29,0-.43q-.06-.85-.15-1.71l0-.35c-.07-.55-.14-1.1-.23-1.64l-.06-.42c-.08-.5-.17-1-.28-1.49,0-.2-.07-.4-.11-.59-.09-.44-.2-.87-.3-1.3-.07-.26-.13-.52-.2-.78s-.21-.74-.32-1.11-.19-.65-.29-1l-.33-1c-.12-.36-.25-.72-.39-1.09s-.23-.59-.35-.88-.3-.73-.45-1.09l-.4-.9-.48-1-.48-.95c-.15-.29-.31-.58-.47-.87s-.38-.67-.57-1-.31-.53-.48-.79-.42-.67-.64-1-.33-.49-.49-.73l-.7-1c-.17-.24-.36-.48-.54-.72l-.71-.91c-.21-.26-.42-.51-.64-.76l-.69-.81-.75-.8c-.22-.23-.43-.47-.65-.69l-.87-.85-.61-.58c-.32-.3-.64-.58-1-.86s-.38-.34-.58-.5-.69-.57-1-.84l-.6-.46c-.35-.27-.7-.52-1.06-.78l-.65-.45c-.35-.24-.69-.47-1-.69l-.74-.47-1-.59c-.28-.17-.57-.33-.86-.49l-1-.51-1-.47-1-.45-1-.42c-.34-.14-.68-.29-1-.42l-.85-.32-1.17-.42-.69-.22-1.35-.41-.5-.13c-.51-.14-1-.28-1.54-.4l-.34-.07c-.57-.12-1.13-.24-1.71-.34l-.26,0c-.59-.1-1.18-.2-1.77-.27l-.36,0-1.68-.18-.63,0c-.47,0-.94-.07-1.41-.08h-2c-.45,0-.89,0-1.33.06l-.72,0c-.49,0-1,.08-1.48.13l-.57,0-1.47.2c-.2,0-.4,0-.6.09-.45.07-.9.16-1.35.25l-.73.14-1.19.28-.89.22-1,.3-1,.31-.9.31-1.14.41-.78.3-1.43.61-.75.33-1.38.68-.69.35c-.58.31-1.14.63-1.69,1-.25.14-.5.3-.74.45-.47.29-.93.58-1.39.89l-.78.55c-.35.25-.71.5-1,.76l-.77.6-1,.83-.69.6-1,1-.57.54c-.39.38-.76.77-1.14,1.16-.13.15-.27.29-.41.43-.45.5-.9,1-1.33,1.52,0,.05-.09.1-.13.16a42.35,42.35,0,0,0-4,5.64l-.23.42c-.3.51-.58,1-.85,1.54l-.33.67c-.22.44-.44.89-.65,1.34L65,368.62c-.16.4-.34.8-.49,1.2s-.21.57-.32.86c-.17.47-.34.94-.5,1.42a43.39,43.39,0,0,0-1.55,6.44c0,.22-.07.44-.1.66-.09.63-.17,1.26-.23,1.89,0,.17,0,.33,0,.49a42.46,42.46,0,0,0-.16,4.36v.12a42.79,42.79,0,0,0,2.52,13.67,0,0,0,0,0,0,0c.19.53.4,1.05.61,1.57s.41,1,.62,1.45.31.7.48,1.05A42.89,42.89,0,0,0,69.44,410c.33.47.66.93,1,1.38s.5.63.76,1,.66.82,1,1.21.63.69,1,1,.63.68,1,1,.76.73,1.14,1.08l.9.83c.39.34.78.66,1.18,1l5.4-7,3,2.45-1.48,1.9h40.22l-1.54-2,3-2.45,5.48,7.07.36-.3c.41-.34.81-.69,1.21-1.05.2-.18.4-.36.59-.55l1-1,.64-.66c.3-.31.59-.63.89-1s.44-.49.65-.74.55-.66.82-1l.61-.75c.33-.43.65-.87,1-1.31l.53-.75c.36-.53.71-1.05,1-1.6.14-.22.27-.45.41-.68.26-.44.51-.87.76-1.32l.38-.73q.36-.69.69-1.38l.36-.77c.17-.36.32-.73.48-1.1s.25-.59.37-.89.25-.67.37-1,.25-.69.37-1,.18-.57.27-.86.25-.78.36-1.18c.07-.23.12-.47.19-.7.12-.45.23-.9.34-1.35l.12-.57q.16-.74.3-1.47c0-.18.05-.37.08-.55.09-.49.17-1,.23-1.49,0-.23.05-.45.08-.68,0-.45.1-.9.14-1.36s0-.65.05-1,.05-.71.06-1.07,0-.9,0-1.35v-.69Q147.13,383.82,147.08,383Zm-38.94,18.3v12.08h-7.71V400h7.71ZM93.14,382v-4.82A2.13,2.13,0,0,1,95.26,375h18a2.13,2.13,0,0,1,2.12,2.13V382Zm22.29,1.43v5.74h-2.87a2.55,2.55,0,0,1-2.54-2.55v-3.19Zm-6.84,0V386H100v-2.58Zm-10,0v3.19A2.54,2.54,0,0,1,96,389.13H93.14v-5.74ZM96,390.56a4,4,0,0,0,3.88-3.16h8.79a4,4,0,0,0,3.88,3.16h2.87v7.79H93.14v-7.79Zm35.1-18v32.2L124.82,410l-3,2.45-1,.82H109.31V400H120v2.25h9.45V385.93a4,4,0,0,0-4-4h-8.65v-4.82a3.55,3.55,0,0,0-3.55-3.55h-18a3.55,3.55,0,0,0-3.56,3.55V382H83.05a4,4,0,0,0-4,4v16.32H88.4V400H99.26v13.22H87.73l-.9-.74-3-2.45-6.4-5.24V370.27L82.15,360l5.09-4.9.12-.12h0a2,2,0,0,1,1.25-.6H120a2,2,0,0,1,1.25.6h0l.12.12,5.09,4.9,4.69,10.26Zm-3.06,18v7.79H116.86v-7.79Zm-11.19-1.43v-5.74h8.65a2.54,2.54,0,0,1,2.54,2.54v3.2Zm-36.35,0v-3.2a2.54,2.54,0,0,1,.2-1,3.62,3.62,0,0,1,.24-.43,2.52,2.52,0,0,1,2.1-1.12H91.7v5.74Zm11.19,1.43v7.79H80.51v-7.79Z" transform="translate(-54.36 -335.28)" fill="#06de3a"></path><polygon points="66.02 22.35 63.55 22.35 63.55 32.7 72.7 32.7 69.29 25.42 66.02 22.35" fill="#06de3a"></polygon><path d="M95.34,397.49a1.22,1.22,0,0,0,.1-2.43h-.1a1.22,1.22,0,0,0-1.22,1.22,1.35,1.35,0,0,0,.07.41A1.23,1.23,0,0,0,95.34,397.49Z" transform="translate(-54.36 -335.28)" fill="#06de3a"></path><path d="M117.64,404.05H113.3a.86.86,0,0,0-.87.87v2.95a.87.87,0,0,0,.87.87h4.34a.89.89,0,0,0,.85-.67,1.23,1.23,0,0,0,0-.2v-2.95A.86.86,0,0,0,117.64,404.05Z" transform="translate(-54.36 -335.28)" fill="#06de3a"></path><path d="M122.23,405.17a1.24,1.24,0,0,0-.85.35,1.21,1.21,0,0,0,.22,1.91,1.22,1.22,0,0,0,.63.18,1.25,1.25,0,0,0,.63-.18h0a1.22,1.22,0,0,0-.63-2.26Z" transform="translate(-54.36 -335.28)" fill="#06de3a"></path><polygon points="30.54 25.42 27.13 32.7 62.24 32.7 62.24 22.35 33.82 22.35 30.54 25.42" fill="#06de3a"></polygon><path d="M113.23,394.19A1.22,1.22,0,1,0,112,393,1.22,1.22,0,0,0,113.23,394.19Z" transform="translate(-54.36 -335.28)" fill="#06de3a"></path><path d="M113.23,397.49a1.22,1.22,0,0,0,1.19-1,1.1,1.1,0,0,0,0-.26,1.21,1.21,0,0,0-1.16-1.21h0a1.22,1.22,0,1,0,0,2.44Z" transform="translate(-54.36 -335.28)" fill="#06de3a"></path><path d="M104.28,376.57a1.22,1.22,0,1,0,1.22,1.22A1.22,1.22,0,0,0,104.28,376.57Z" transform="translate(-54.36 -335.28)" fill="#06de3a"></path><path d="M95.34,394.19A1.22,1.22,0,1,0,94.12,393,1.22,1.22,0,0,0,95.34,394.19Z" transform="translate(-54.36 -335.28)" fill="#06de3a"></path><path d="M82.31,418.31l-1.87,2.42c.59.4,1.19.78,1.81,1.15h44.24c.61-.36,1.21-.75,1.8-1.14l-1.88-2.43Z" transform="translate(-54.36 -335.28)" fill="#06de3a"></path><path d="M87.27,424.48l.11.06c.7.3,1.4.58,2.11.85h0a43,43,0,0,0,9,2.27h0c.74.11,1.49.19,2.25.25l.21,0c.73.06,1.47.1,2.21.12h0c.66,0,1.33,0,2,0l.56,0c.61,0,1.23,0,1.85-.1l.72-.07a40.78,40.78,0,0,0,6.5-1.13c.47-.12.94-.26,1.41-.4l.93-.26,1.18-.41,1.12-.4c.45-.17.89-.35,1.33-.54l.74-.3.07,0H87.05Z" transform="translate(-54.36 -335.28)" fill="#06de3a"></path></svg> '

const DATA_GRABBING_INTERVAL = process.env.DATA_GRABBING_INTERVAL_MIN || 15;

if (DATA_GRABBING_INTERVAL < 5) {
    console.log('Data grabbing interval should be at least 5 min.');
    process.exit(1);
}

const app = express();

app.use(express.urlencoded({extended: true}));
app.use(express.json());

let interval;
let latest = [];

app.get('/', (req, res) => {
    let active = "No"
    if (interval != null) {
        active = "Yes"
    }
    let secs = DATA_GRABBING_INTERVAL * 60
    res.status(200).send(`
        <html><head><meta http-equiv="refresh" content="${secs}"><title>NRail IoT vehicle API</title></head><body><a href="https://nrail.de" target="_blank">${NRAIL_LOGO}</a><p style="font-size: 12pt; font-family: monospace;">This is an example implementation of the <a href="https://rapidapi.com/nrail/api/nrail-vehicle-api" target="_blank">NRail vehicle API.</a><br/>If not already done, please add your <b>RAPID_API_KEY</b> and <b>NRAIL_TOKEN</b> to the environment file <b>.env</b><br/>For more information visit: <a href="https://rapidapi.com/nrail/api/nrail-vehicle-api" target="_blank">RapidAPI</a> or contact our support at: iot-at-nrail.de.</p><h3>Activate the data fetching by <a href="/pull">clicking here</a></h3><h3>Stop the data fetching by <a href="/stop">clicking here</a></h3><ul><li>Fetching active: ${active}</li><li>Fetching interval: ${DATA_GRABBING_INTERVAL} minutes</li><li>Rapid API Host: ${process.env.RAPID_API_HOST}</li><li>Latest data: <br/>${latest.join('<br/>')}</li></ul></body></html>`
    )
});

async function fetch_data() {
    try {
        const response = await fetch(`${process.env.RAPID_API_BASE_URL}/live-data/all`, {
            method: 'GET',
            headers: {
                'x-rapidapi-key': process.env.RAPID_API_KEY,
                'x-rapidapi-host': process.env.RAPID_API_HOST,
                'x-nrail-token': process.env.NRAIL_TOKEN,
            },
        });

        let response_text = await response.text();
        let positions = null;
        try {
            positions = JSON.parse(response_text);
            response_text = positions.message;
        } catch (error) {
            // Do nothing, errored though. Sometimes the result is not json
        }

        let logstring;
        latest = [];
        if (response.status !== 200 || positions === null) {
            console.log(`= ${response.status}: ${response_text}`);
            latest.push(`<b>ERROR: ${response.status}: ${response_text}</b>`)
        } else {
            positions.forEach((element) => {
                const vehicleName = _.get(_.get(element, 'deviceReferences'), 'vehicleName', '-');
                const uicNumber = _.get(_.get(element, 'deviceReferences'), 'uicNumber', '-');
                const longitude_deg = _.get(_.get(element, 'position'), 'longitude_deg', '-');
                const latitude_deg = _.get(_.get(element, 'position'), 'latitude_deg', '-');
                const altitude_m = _.get(_.get(element, 'position'), 'altitude_m', '-');
                const speed_km_h = _.get(element, 'speed_km_h', '-');
                const operatingHours_h = _.get(
                    _.get(_.head(_.get(element, 'engines')), 'operatingHours'),
                    'operatingHours_h',
                    '-'
                );

                let mileageOnWheels_km = _.get(_.get(element, 'mileage'), 'mileageOnWheels_km');
                mileageOnWheels_km = mileageOnWheels_km ? _.round(mileageOnWheels_km, 2) : '-';
                
                logstring = `vehicle ${vehicleName} (${uicNumber}) at position: long: ${longitude_deg}, lat: ${latitude_deg}, alt: ${altitude_m}. Driving at ${speed_km_h} km/h with ${operatingHours_h} engine hours and ${mileageOnWheels_km} km on wheels.`
                latest.push(logstring);
                console.log(`= ${logstring} `);
            });
        }
    } catch (error) {
        console.log(error)
        clearInterval(interval);
        interval = null;
    }
}

app.get('/pull', async (req, res) => {
    if (interval) return res.status(409).send('Pulling data interval already exists.<br/><a href="/">Back to Status page</a>');

    interval = setInterval( () => { 
        fetch_data()
    }, DATA_GRABBING_INTERVAL * 60 * 1000);
    await fetch_data();
    return res.status(200).send('Fetching data is enabled.<br/><a href="/">Back to Status page</a>')
});

app.get('/stop', async (req, res) => {
    if (!interval) return res.status(404).send(`Fetching data is disabled.<br/><a href="/">Back to Status page</a>`);
    clearInterval(interval);
    interval = null;
    return res.status(200).send('Fetching data is disabled.<br/><a href="/">Back to Status page</a>')
});

const server = app.listen(process.env.PORT || 5000, () => {
    console.log(`Service listening on port ${process.env.PORT}`);
    console.log(`Please visit: http://localhost:${process.env.PORT} to activate data fetching.`);
});

function shutdown(){
    clearInterval(interval);
    interval = null;
    server.close(() => {
        console.log('Server closed.');
        process.exit(0);
    });
}

if (process.platform === "win32") {
    var rl = require("readline").createInterface({
      input: process.stdin,
      output: process.stdout
    });
  
    rl.on("SIGINT", function () {
      process.emit("SIGINT");
    });
  }

process.on('SIGINT', shutdown);
process.on('SIGTERM', shutdown);
